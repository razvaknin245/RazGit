!<arch>
string.c/       0           0     0     644     3512      `
#include "string.h"

char* StrCpy(char * dest,const char * src)
{
	char *destPlace = dest;
	while(*src != '\0')
	{
	 *dest = *src;
	 dest++;
	 src++;
	}
	*dest = '\0';
	return destPlace;
}

char* StrNcpy(char * dest,const char * src, size_t n)
{
   char *destPlace = dest;
   int flag = 0;
   while(*src != '\0')
   {
    *dest = *src;
    if(*(src+1)=='\0')
    	{
    	  flag = 1;
    	}
    dest++;
    src++;
   }
   if(flag == 1)
   {
     while(n > 0)
     {
     	*dest = '\n';
     	dest++;
     	n--;
     }
   }
   return destPlace;
}
size_t StrLen(const char *str)
{
   size_t count = 0;
   while(*str != '\0')
   {
	str++;
	count++;
   }
  return count;
}

int StrCmp(const char *str1 , const char *str2)
{
	while(*str1 != '\0' || *str2 != '\0')
	{
	    if(*str1 > *str2)
	    {
	    	return 1; 
	    }
	    else if(*str1 < *str2)
	    {
	    	return -1;
	    }
	    str1++;
	    str2++;	
	}
	return 0;
}
int StrNcmp(const char *str1, const char *str2 , size_t n)
{
	while(n > 0)
	{
	    if(*str1 > *str2)
	    {
	    	return 1; 
	    }
	    else if(*str1 < *str2)
	    {
	    	return -1;
	    }
	    str1++;
	    str2++;
	    n--;	
	}
	return 0;
}
int StrCasecmp (const char * str1,const char * str2)
{
	int diff = 'a' - 'A';
	char tmp1;
	char tmp2;
	while(*str1 != '\0' || *str2 != '\0')
	{	
		tmp1 = *str1;
		tmp2 = *str2;
	 	if(tmp1 >='A' && tmp1 <= 'Z')
		{
	 	 	tmp1 = tmp1 + diff;
	 	}
		if(tmp2 >='A' && tmp2<='Z')
		{
	 	 	tmp2 = tmp2 + diff;
	 	}
		if(tmp1 > tmp2)
		{
			return 1;
		}
		else if(tmp1 < tmp2)
		{
		 	return -1;
		}
		str1++;
		str2++;
	}
	return 0;	
}
char *StrChr(const char *s , int c)
{
	while(*s != '\0' )
	{
		if(*s == c)
		{
		  return (char *)s;
		}
	  s++;
	}
	return NULL;
}
char *StrDup(const char *s)
{
	char *retStr;
	char *tmp;
	int countLen = 0;
	while(*(s + countLen) != '\0')
	{
		countLen++;
	}
	retStr = malloc(countLen + 1); 
	tmp = retStr;
	while(*s != '\0')
	{
		*tmp = *s;
		tmp++;
		s++;
	}
	*tmp = '\0';
	return retStr;	
}
char *StrCat(char *dest, const char *src)
{
	int destLen = 0;
	char* tmp;
	while(*(dest+destLen) != '\0')
	{
		destLen++;	
	}
	tmp = dest+destLen;
	while(*src != '\0')
	{
	     *tmp = *src;
	     tmp++;
	     src++;
	}
	*tmp = '\0';
	return dest;	
}
char *StrNcat(char *dest, const char *src,size_t n)
{
	int destLen = 0;
	char* tmp;
	while(*(dest+destLen) != '\0')
	{
		destLen++;	
	}
        tmp = dest + destLen;	
	while(n > 0 && n--)
	{
	    *tmp = *src;
	    tmp++;
	    src++;
	}
	return dest;	
}
char *StrStr(const char *haystack, const char* needle)
{
	const char* currHaystack;
	const char* headNeedle;
	int len;
	int flag = 0;
	len = StrLen(needle);

	headNeedle = needle;
	while(*haystack != '\0')
	{
	   if(*needle == *haystack)
	   {
	      if(needle == headNeedle)
	      {
	        currHaystack = haystack;
	      }
	      needle++;
	      flag++;
	   }
	   else
	   {
	     needle = headNeedle;
	   }
	   if(flag == len)
	     return (char*)currHaystack;
	   haystack++;
	}
	return NULL;	
}
size_t StrSpn(const char *s, const char *accept)
{
	size_t flag = 0;
	const char* temp = accept;
	while(*s !='\0')
	{
		accept = temp;
		while(*accept != '\0')
		{
			if(*accept == *s)
			{
			 flag++;
			 break;
			}
			accept++;
		 }
		 if(*s != *accept)
		 {
		  return flag;
		 }
		s++;
	}
	return flag;
}
int StrPali(const char *s)
{
	int len = StrLen(s);
	int i = 0;
	int j = len - 1;
	const char* tmp = s+j;
	for(i = 0; i < len / 2;i++)
	{
		if(*s != *tmp)
		{
		  return -1;
		}
		s++;
		tmp--;
	}
	return 0;
}
string.h/       0           0     0     644     663       `
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

char * StrCpy(char *dest, const char *src);

char * StrNcpy(char * dest, const char * src, size_t n);

int StrNcmp(const char *str1, const char *str2 , size_t n);

size_t StrLen(const char *str);

int StrCmp(const char *str1,const char *str2);

int StrCasecmp (const char * str1,const char * str2);

char *StrChr(const char *s , int c);

char *StrDup(const char *s);

char *StrCat(char *dest, const char *src);

char *StrNcat(char *dest, const char *src,size_t n);

char *StrStr(const char *haystack, const char* needle);

size_t StrSpn(const char *s, const char *accept);

int StrPali(const char *s);


string_test.c/  0           0     0     644     1549      `
#include <string.h>
#include "string.h"
int main()
{

	char source[]="BC";
	char check[100]="ABCD";
	char checkDUp[100];
	printf("teststrcmp: %d \n",StrCasecmp(source,check));
	/*char dst[10];
	char * firstAddress;
	char * saver ;
	assert(StrCpy(dst,source)); check if str copied to the dst
	assert(StrNcpy(dst,source,3)); check if str copied to the dst
	printf("%ld \n",StrLen(source)); /check if length is right
	printf("%d \n",StrCmp(source,check)); 
	printf("%s \n",source);
	printf("%s \n",check);
	printf("%d \n",StrCasecmp(source,check));
	printf("%s \n",source);
	printf("%s \n",check);
	
	firstAddress = check;
	saver = StrChr(source,'a');
	printf("the a address : %p, the check address : %p \n",(void *)saver,(void*) firstAddress);
	printf("%d \n",StrCasecmp(source,check));
	printf("%s\n",source);
	printf("%s\n",check);
	printf("%s\n",StrDup(check));
	printf("%s\n",StrNcat(check,source,3));
	
	StrCpy(source,check);
	WW
	printf("%s \n",source);
	printf("%s \n",check);
	
	printf("addres in src : %p \n",(void *)source);
	printf("adress the the sub start : %p \n",(void *)(StrStr(source,check)));
 	*/
 	printf("addres in src : %p \n",(void *)check);
 	printf("MY adress the the sub start : %p \n",(void *)(StrStr(check,source)));
 	printf("Them adress the the sub start : %p \n",(void*)(strstr(check,source)));
	
 	printf("my : %ld \n",StrSpn(source,check));
	printf("them : %ld \n",strspn(source,check));
	if(StrPali("kosok") == 0)
	{
	 printf("Worked \n");
	}
	if(StrPali("razzar") != 0)
	{
	 printf("Not Worked \n");
	}
	return 0;
}

